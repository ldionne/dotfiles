#!/usr/bin/env bash

set -e

PROGNAME="$(basename "${0}")"
function usage() {
cat <<EOF
Usage:
${PROGNAME} clone --release <RELEASE> <REPO>
${PROGNAME} cmake <REPO>
${PROGNAME} update <REPO>
${PROGNAME} install <REPO>
${PROGNAME} clean <REPO>
${PROGNAME} test <REPO>
EOF
}

function main() {
    for arg in $@; do
        if [[ "${arg}" == "-h" || "${arg}" == "--help" ]]; then
            usage
            exit 0
        fi
    done

    case ${1} in
        clone|cmake|update|install|clean|test)
            action="${1}"
            shift
            ;;
        *)
            echo "Invalid action '${1}'"
            usage
            exit 1
            ;;
    esac

    do-${action} $@
}

CANONICAL_LLVM_REPO="${HOME}/.canonical_llvm_repo"
CANONICAL_LLVM_MIRROR="https://github.com/llvm-project/llvm-project-20170507"
function _update_canonical_repo() {
    if [[ ! -d "${CANONICAL_LLVM_REPO}" ]]; then
        echo "Setting up canonical repository for LLVM sources at '${CANONICAL_LLVM_REPO}' (one-time only)"
        git clone --mirror "${CANONICAL_LLVM_MIRROR}" "${CANONICAL_LLVM_REPO}"
    else
        mirror="$(git -C "${CANONICAL_LLVM_REPO}" remote get-url origin)"
        if [[ "${mirror}" != "${CANONICAL_LLVM_MIRROR}" ]]; then
            echo "The canonical LLVM repository appears to have a different remote URL (${mirror}) than the one we expected (${CANONICAL_LLVM_MIRROR}). You probably need to nuke the repository and clone again from the new mirror."
            exit 1
        fi
        echo "Updating canonical LLVM repository with the latest sources"
        git -C "${CANONICAL_LLVM_REPO}" fetch --all
    fi
}

function do-clone() {
    while [[ $# -gt 0 ]]; do
    case ${1} in
        --release)
            release="${2}"
            shift
            shift
            ;;
        *)
            REPO_ROOT="$(realpath "${1}")"
            shift
        ;;
    esac
    done

    case ${release} in
        3.0.x) sha=release_30 ;;
        3.1.x) sha=release_31 ;;
        3.2.x) sha=release_32 ;;
        3.3.x) sha=release_33 ;;
        3.4.x) sha=release_34 ;;
        3.5.x) sha=release_35 ;;
        3.6.x) sha=release_36 ;;
        3.7.x) sha=release_37 ;;
        3.8.x) sha=release_38 ;;
        3.9.x) sha=release_39 ;;
        4.x)   sha=release_40 ;;
        4.0.0) sha=RELEASE_400/final ;;
        4.0.1) sha=RELEASE_401/final ;;
        5.x)   sha=release_50 ;;
        5.0.0) sha=RELEASE_500/final ;;
        5.0.1) sha=RELEASE_501/final ;;
        6.x)   sha=release_60 ;;
        6.0.0) sha=release_600 ;;
        6.0.1) sha=release_601 ;;
        7.x)   sha=release_70 ;;
        7.0.0) sha=RELEASE_700/final ;;
        trunk) sha=master ;;
        *)
            echo "Unknown release '${release}'"
            exit 1
            ;;
    esac

    if [[ -e "${REPO_ROOT}" ]]; then
        "Repository '${REPO_ROOT}' already exists: not overwriting it"
        exit 1
    fi

    _update_canonical_repo
    git clone --shared "${CANONICAL_LLVM_REPO}" "${REPO_ROOT}"
    git -C "${REPO_ROOT}" checkout "${sha}"
}

function do-cmake() {
    REPO_ROOT="$(realpath "${1}")"
    shift

    if [[ ! -d "${REPO_ROOT}" ]]; then
        echo "Invalid repository '${REPO_ROOT}'"
        exit 1
    fi

    LLVM_ROOT="${REPO_ROOT}/llvm"
    BUILD_DIR="${REPO_ROOT}/build"
    INSTALL_DIR="${REPO_ROOT}/install"

    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}"
    (cd "${BUILD_DIR}" &&
        cmake "${LLVM_ROOT}" -GNinja \
                             -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" \
                             -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi;libunwind;compiler-rt" \
                             -DCMAKE_BUILD_TYPE=RelWithDebInfo)
}

function do-update() {
    REPO_ROOT="$(realpath "${1}")"
    shift

    if [[ ! -d "${REPO_ROOT}" ]]; then
        echo "Invalid repository '${REPO_ROOT}'"
        exit 1
    fi

    _update_canonical_repo
    git -C "${REPO_ROOT}" pull # TODO: This only works if we're on a branch, not on a tag
    do-install "${REPO_ROOT}"
}

function do-install() {
    REPO_ROOT="$(realpath "${1}")"
    shift

    if [[ ! -d "${REPO_ROOT}" ]]; then
        echo "Invalid repository '${REPO_ROOT}'"
        exit 1
    fi

    BUILD_DIR="${REPO_ROOT}/build"
    INSTALL_DIR="${REPO_ROOT}/install"

    if [[ ! -d "${BUILD_DIR}" ]]; then
        do-cmake "${REPO_ROOT}"
    fi

    rm -rf "${INSTALL_DIR}"
    ninja -C "${BUILD_DIR}" install-{clang,cxx,cxxabi,unwind,tsan,asan,lsan,ubsan,clang-format,clang-headers}
}

function do-clean() {
    REPO_ROOT="$(realpath "${1}")"
    shift

    if [[ ! -d "${REPO_ROOT}" ]]; then
        echo "Invalid repository '${REPO_ROOT}'"
        exit 1
    fi

    BUILD_DIR="${REPO_ROOT}/build"
    rm -rf "${BUILD_DIR}"
}

function do-test() {
    REPO_ROOT="$(realpath "${1}")"
    shift

    if [[ ! -d "${REPO_ROOT}" ]]; then
        echo "Invalid repository '${REPO_ROOT}'"
        exit 1
    fi

    BUILD_DIR="${REPO_ROOT}/build"
    INSTALL_DIR="${REPO_ROOT}/install"

    if [[ ! -d "${BUILD_DIR}" ]]; then
        do-cmake "${REPO_ROOT}"
    fi

    ninja -C "${BUILD_DIR}" check-cxx check-cxxabi check-unwind check-clang check-compiler-rt
}

main $@

#!/usr/bin/env bash

set -ex

function git-repo-root() {
    git rev-parse --show-toplevel
}

UMBRELLA_ROOT="$(git-repo-root)"
LLVM_ROOT="${UMBRELLA_ROOT}/llvm"

BUILDER="${1}"

BUILD_DIR="${UMBRELLA_ROOT}/builders/${BUILDER}"
INSTALL_DIR="${UMBRELLA_ROOT}/builders/${BUILDER}/install"

function unsupported() {
    echo "${BUILDER} is not supported yet"
    exit 1
}

args=()

args+=("-DLLVM_ENABLE_PROJECTS=libcxx;libunwind;libcxxabi")
args+=("-DLIBCXX_CXX_ABI=libcxxabi")

case "${BUILDER}" in
libcxx-libcxxabi-x86_64-linux-debian)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
;;
libcxx-libcxxabi-x86_64-linux-debian-noexceptions)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
    args+=("-DLIBCXX_ENABLE_EXCEPTIONS=OFF")
    args+=("-DLIBCXXABI_ENABLE_EXCEPTIONS=OFF")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-32bit)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
    args+=("-DLLVM_BUILD_32_BITS=ON")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-cxx03)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported --param=std=c++03")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-cxx11)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported --param=std=c++11")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-cxx14)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported --param=std=c++14")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-cxx17)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported --param=std=c++17")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-cxx2a)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported --param=std=c++2a")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-gcc-tot-latest-std)
    export CC=/opt/gcc-tot/bin/gcc
    export CXX=/opt/gcc-tot/bin/g++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-gcc5-cxx11)
    export CC=/opt/gcc-5/bin/gcc
    export CXX=/opt/gcc-5/bin/g++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported --param=std=c++11")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-asan)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_USE_SANITIZER=Address")
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-msan)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_USE_SANITIZER=MemoryWithOrigins")
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-tsan)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_USE_SANITIZER=Thread")
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
;;
libcxx-libcxxabi-x86_64-linux-ubuntu-ubsan)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_USE_SANITIZER=Undefined")
    args+=("-DLIBCXX_ABI_UNSTABLE=ON")
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
;;
libcxx-libcxxabi-libunwind-aarch64-linux)
    unsupported
;;
libcxx-libcxxabi-libunwind-aarch64-linux-noexceptions)
    unsupported
;;
libcxx-libcxxabi-libunwind-armv7-linux)
    unsupported
;;
libcxx-libcxxabi-libunwind-armv7-linux-noexceptions)
    unsupported
;;
libcxx-libcxxabi-libunwind-armv8-linux)
    unsupported
;;
libcxx-libcxxabi-libunwind-armv8-linux-noexceptions)
    unsupported
;;
libcxx-libcxxabi-libunwind-x86_64-linux-debian)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
    args+=("-DLIBCXXABI_USE_LLVM_UNWINDER=ON")
;;
libcxx-libcxxabi-libunwind-x86_64-linux-ubuntu)
    unsupported
;;
libcxx-libcxxabi-singlethreaded-x86_64-linux-debian)
    export CC=clang
    export CXX=clang++
    args+=("-DLLVM_LIT_ARGS=-sv --show-unsupported")
    args+=("-DLIBCXX_ENABLE_THREADS=OFF")
    args+=("-DLIBCXXABI_ENABLE_THREADS=OFF")
    args+=("-DLIBCXX_ENABLE_MONOTONIC_CLOCK=OFF")
;;
*)
    unsupported
;;
esac

if [[ ! -e "${BUILD_DIR}" ]]; then
    mkdir -p "${BUILD_DIR}"
    (cd "${BUILD_DIR}" &&
        cmake "${LLVM_ROOT}" -GNinja \
                             -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" \
                             -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                             "${args[@]}")
fi

sudo -u buildbot ninja -C "${BUILD_DIR}" check-cxx check-cxxabi
